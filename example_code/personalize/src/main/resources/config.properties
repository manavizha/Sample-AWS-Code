newDatasetGroupName = <enter the name for the new dataset group>
schemaName = <Specify the name for the new schema>
schemaLocation = <Specify the file path location of the schema JSON file on your local machine >

schemaArn = <specify the Amazon Resource Name (ARN) for an existing schema>
newDatasetName = <specify the name for the new dataset>
datasetType = <specify the type of the dataset. Choose between INTERACTIONS or USERS or ITEMS>
existingDatasetGroup = <specify the ARN of an existing dataset group>

datasetImportJobName = <specify the name of the dataset import job>
importDatasetArn = <specify the ARN of the destination dataset for the import job>
s3BucketPath = <specify the path to your s3 bucket in the following format:\
  \ 3://<bucket name>/<filename>.csv or s3://<bucket name>/folderName>
roleArn = <specify the ARN of your Amazon Personalize service-linked IAM role>

newSolutionDatasetGroupArn = <specify the ARN of the dataset group where you want to create the new solution>
recipeArn = <specify the ARN of the recipe the new solution uses>
newSolutionName = <specify a name for the new solution>

createSolutionVersionSolutionArn = <Specify the ARN of the Solution you want to create a Solution Version for>

existingSolutionVersionArn = <Specify the ARN of the existing solution version you want to deploy>
campaignName = <Specify a name for the campaign>

existingCampaignArn = <Specify the ARN of an existing campaign>
userId = <Specify the user ID for the user you want to get recommendations for>

putEventTrackerId = <Specify the tracking ID for an existing event tracker>
putEventUserId = <Specify the ID for the user interacting with the item>
putEventItemId = <Specify the ID for the item the user is interacting with>
putEventSessionId = <Specify the ID for the session. Your application generates the sessionId.>

itemsDatasetArn = <Specify the ARN of the Items dataset you want to add the item to>
item1Id = <Specify the itemID for the first item>
item1PropertyName = <Specify a property name (column name) for the first item>
item1PropertyValue = <Specify a value for the first item's property>
item2Id = <Specify the itemID for the second item>
item2PropertyName = <Specify a property name (column name for the second item)>
item2PropertyValue = <Specify a value for the second item's property>

usersDatasetArn = <Specify the ARN of the Users dataset you want to add the user to>
user1Id = <Specify the userId for the first user>
user1PropertyName = <Specify a property name (column name in camelCase) for the first user>
user1PropertyValue = <Specify a property name (column name in camelCase) for the first user>
user2Id = <Specify the userId for the second user>
user2PropertyName = <Specify a property name (column name in camelCase) for the second user>
user2PropertyValue = <Specify a property name (column name in camelCase) for the second user>

filterName = <Specify a name for the filter>
filterDatasetGroupArn = <Specify the ARN of the dataset group that will use the filter>
filterExpression = <Specify the filter expression for the filter>

filterRecCampaignArn = <Specify the ARN of the campaign you want to use to generate filtered recommendations>
filterRecUserId = <Specify the userId for the user you want to get filtered recommendations for>
filterRecFilterArn = <Specify the ARN of the filter you want to use>

# This example shows how to use a filter with an expression with two placeholder parameters, passing two values to the first and one to the second.
# Your filter may not have the same number of parameters or you may not want to use two values.
# Add or remove properties to match your filter, and then change the cod in PersonalizeTest.java and FilterRecommendations.java
filterRecParameter1Name = <Specify the first parameter name. For example, if your filter expression has a $GENRES parameter, provide "GENRES" as the parameter name>
filterRecParameterValue1 = <Specify a value for the first parameter>
filterRecParameterValue2 = <Specify a second value for the first parameter>
filterRecParameter2Name = <Specify the second parameter name>
filterRecParameter2Value = <Specify a value for the second parameter>

batchSolutionVersionArn = <Specify the ARN of the solution version to use in the batch inference job>
jobName = <Specify a name for the batch inference job>
s3InputDataSource = <Specify the file path for your input file in s3. For example s3://<bucket-name>/<input-file-name>.json>
s3DataDestination = <Specify the file path for your output folder in s3. For example s3://<bucket-name>/output
batchServiceRoleArn = <Specify the service-linked role to use for the batch inference job>
explorationWeight = <Configure how much to explore. The default is .3. The closer the value is to 1, the more exploration.>
explorationItemAgeCutOff = <Specify the maximum item age, in days since the latest interaction, to define the scope of item exploration.>

rankingItemIds = <Specify a comma-delimited list of item Ids for the items to be ranked>
rankingCampaign = <Specify the campaign to use for ranking items>
rankingUserId = <Specify the userID of the user to rank items for>

ingestionMode = <Specify the type of data to export - bulk, put, or all>
exportJobName = <Specify the name of the export job>
exportDatasetArn = <Specify the ARN of the dataset to export>
exportS3BucketPath = <Specify the path to the output s3 location in s3://bucket-name/output/ format>
kmsKeyArn = <Specify the ARN of your KMS key. If you don't use one, remove this field from this properties file, and the PersonalizeTest.java, and CreatDatasetExportJob.java>

eventTrackerName = <Specify a name for your event tracker>

updateCampaignArn = <Specify the ARN of the campaign to update>
updateCampaignSolutionVersionArn = <Specify the ARN of different solution version you want to update the campaign to use>
updateCampaignTps = <Specify the minProvisionedTPS you want the updated campaign to use.>

deleteEventTrackerArn = <Specify the ARN of the event tracker to delete.>

